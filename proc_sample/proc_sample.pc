// 마지막고침 : 2024.11.5
// win32 Visual C 2010 이상컴파일시 추가
// 프로그램 가장 첫 줄에 추가할 것
#define _CRT_SECURE_NO_WARNINGS
//-----------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <conio.h>
#include <ctype.h>

/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>


// win32 Visual C 2010 이상컴파일시 추가
#define getch() _getch()
//-----------------------------------------

/*---------------  화면 커서 위치 제어 ----------------------*/
#include < windows.h >
void gotoxy(int x, int y) ;
void getxy(int *x, int *y) ;
void clrscr(void) ;
/*-----------------------------------------------------------*/
void print_screen(char fname[]);
void db_connect();
void select_tuple();
void create_account();
void delete_tuple();
void update_deposit_tuple();
void transaction_tuple();
void send_money();
void sql_error();
void login();
void withdraw();
char id[50];
char password[50];
int isLogin = 0;
int Error_flag = 0;
void main()
{
    char c = 0;


    _putenv("NLS_LANG=American_America.KO16KSC5601");  //한글사용시 필요함

   /* Register sql_error() as the error handler. */
    EXEC SQL WHENEVER SQLERROR DO sql_error("\7에러발생:");

    db_connect();

    while( c != '0') {  
        // 메인 화면 출력
        if(isLogin==0){
            login();
        }
        else{
            clrscr();

        print_screen("user_main.txt") ;
        gotoxy(49,19);

        
        c = getchar() ;
        while (getchar() != '\n');  // 첫글자 외 나머지 입력 버림

        switch(c){
            case '1' : select_tuple();
                         break;
            case '2' : create_account();
                         break;
            case '3' : delete_tuple();
                         break;
            case '4' : send_money();
                         break;
            case '5' : update_deposit_tuple();
                         break;
            case '6' : withdraw();
                        break;
            case '7' : transaction_tuple();            
            default : break ;
	
            }		
        }
    }
    clrscr();
    EXEC SQL COMMIT WORK RELEASE ;
}

void login() {
    EXEC SQL BEGIN DECLARE SECTION;
    char v_id[100] ;
    char v_pwd[100] ;
    varchar db_id[100] ;
    varchar db_pwd[100] ;

    char sqlstmt[1000] = {0};
    EXEC SQL END DECLARE SECTION;

    // 사용자 입력
    clrscr();
    print_screen("user_login.txt");
    gotoxy(40, 5);
    fgets(v_id, sizeof(v_id), stdin);
    v_id[strcspn(v_id, "\n")] = '\0'; // 개행 문자 제거
    gotoxy(40, 7);

    fgets(v_pwd, sizeof(v_pwd), stdin);
    v_pwd[strcspn(v_pwd, "\n")] = '\0'; // 개행 문자 제거

    // SQL 문 준비
    sprintf(sqlstmt, "SELECT user_id, user_password FROM B_USER WHERE user_id = '%s' AND user_password = '%s'", v_id, v_pwd);

    EXEC SQL PREPARE S FROM :sqlstmt;
    EXEC SQL DECLARE l_cursor CURSOR FOR S;
    EXEC SQL OPEN l_cursor;

    isLogin = 0; // 초기화

    while (1) {
        // 데이터 가져오기
        EXEC SQL FETCH l_cursor INTO :db_id, :db_pwd;

        if (sqlca.sqlcode == 1403) {  // 데이터 없음
            gotoxy(25, 10);
            printf("로그인 실패: 아이디 또는 비밀번호가 잘못되었습니다.\n");
            getch();
            break;
        } else if (sqlca.sqlcode < 0) {  // SQL 오류
            printf("SQL 오류 발생: %s\n", sqlca.sqlerrm.sqlerrmc);
            break;
        }

        // 데이터 처리
        db_id.arr[db_id.len] = '\0';
        db_pwd.arr[db_pwd.len] = '\0';
        strncpy(id, db_id.arr, sizeof(id) - 1);
        strncpy(password, db_pwd.arr, sizeof(password) - 1);
        isLogin = 1;
        gotoxy(25, 10);
        printf("로그인 성공! 사용자: %s\n", id);
        getch();
        break;
    }

    // 커서 닫기
    EXEC SQL CLOSE l_cursor;
}

void db_connect()
{
    EXEC SQL BEGIN DECLARE SECTION;
	VARCHAR uid[80];
	VARCHAR pwd[20];
    EXEC SQL END DECLARE SECTION;

    strcpy(uid.arr,"a20213010@//sedb.deu.ac.kr:1521/orcl");
    uid.len =  strlen(uid.arr);
    strcpy(pwd.arr,"20213010");
    pwd.len = strlen(pwd.arr);

    Error_flag = 0 ;  

   // 아래 문장 수행 중에 에러가 발생하면 error 처리 루틴으로 감. Error_flag=1로 바뀜 
    EXEC SQL CONNECT :uid IDENTIFIED BY :pwd;

    // connection이 실패했을경우의 처리부분
    if ( Error_flag == 1 ){
        //printf("Connect error: %s", sqlca.sqlerrm.sqlerrmc);
        exit(-1);
    }
}


#define PAGE_NUM 5
void select_tuple()
{
/* --------------------------------------------------------------------------
   Retrieve the current maximum employee number
-------------------------------------------------------------------------- */
EXEC SQL BEGIN DECLARE SECTION;
   varchar v_acc_number[100];
   varchar v_acc_balance[100];
   varchar v_acc_date[100];
   varchar v_acc_user[100];

   char sqlstmt[1000];
EXEC SQL END DECLARE SECTION;

   char no_temp[20];
   char name_temp[20];

   int x, y, count=0, i ;

   /* 사용자 입력 */
   clrscr();

   print_screen("user_check.txt");

   /* 실행시킬 SQL 문장*/
   sprintf(sqlstmt,"SELECT acc_date, acc_number, acc_balance FROM account where acc_user = '%s'", id); 

   EXEC SQL PREPARE S FROM :sqlstmt ;

   /* 1. cursor declare */
   EXEC SQL DECLARE c_cursor CURSOR FOR S ; 

   /* 2. cursor open */
   EXEC SQL OPEN c_cursor ; 

   x = 10;
   y = 8 ;

   // EXEC SQL WHENEVER NOT FOUND DO break ;  원래는 이렇게 해야 하는데 버그 때문에 아래와 같이 사용함
   while(1)
    {
        /* 3. tuple fetch */
        EXEC SQL FETCH c_cursor INTO :v_acc_date, :v_acc_number, :v_acc_balance;
       
        if(sqlca.sqlcode == 1403) {  // 더이상 가져올 투플이 없는 경우
            break;
        }
        v_acc_date.arr[v_acc_date.len] = '\0' ;
        v_acc_number.arr[v_acc_number.len] = '\0';
        v_acc_balance.arr[v_acc_balance.len] = '\0';

        gotoxy(x,y);
        printf(" | %-4s      |    %-16s  |    %11s 원|", v_acc_date.arr, v_acc_number.arr , v_acc_balance.arr);
        y++;
        count++;
        if( count == PAGE_NUM){
            printf("\n\n                                  hit any key for next\n");

            getch();

            gotoxy(0,8); //이전 화면 부분 클리어
            for(i= 0; i < PAGE_NUM; i++){
                printf("                                                                                               \n");
            }
            y = 8 ;

            count = 0;
        }
    }
    printf("\n\n");	
    printf("                          match tuple no : %d\n", sqlca.sqlerrd[2]);

    /* 4. close the cursor. */
    EXEC SQL CLOSE c_cursor;

    getch();   // 아무키나 치세요. 

}
/*------------ insert -------------*/
void create_account()
{
EXEC SQL BEGIN DECLARE SECTION;

    char sqlstmt[1000];
    char v_pwd[100] ;
    int exists =NULL;

EXEC SQL END DECLARE SECTION;

    char random_number[9];
    srand(time(NULL)); // 랜덤 시드 설정
    do {
        sprintf(random_number, "%08d", rand() % 100000000);
        /* acc_number 중복 확인 쿼리 */
        sprintf(sqlstmt, "SELECT COUNT(*) FROM account WHERE acc_number = '%s'", random_number);
        EXEC SQL PREPARE S FROM :sqlstmt;
        EXEC SQL DECLARE check_cursor CURSOR FOR S;
        EXEC SQL OPEN check_cursor;

        EXEC SQL FETCH check_cursor INTO :exists;

        EXEC SQL CLOSE check_cursor;

    } while (exists > 0);

    int x, y ;

    clrscr();
    print_screen("user_create_1.txt");

   /* 데이터 입력 */
    x = 35;
    y = 10 ;

   /* 비밀번호 입력 */
    gotoxy(x,y)  ; 
    gets(v_pwd);

    

    if(strcmp(v_pwd, password)==0){
        sprintf(sqlstmt,"insert into account(acc_number, acc_user) values ( '%s', '%s')" ,random_number, id);
    }
    else{
        printf("비밀번호가 틀렸습니다.");
        getch();
        return;
    }
    

    // printf("sqlstmt:%s\n", sqlstmt);

   /* insert 문 실행 */
    Error_flag = 0 ;

   // 아래 문장 수행 중에 에러가 발생하면 error 처리 루틴으로 감. Error_flag=1로 바뀜 
    EXEC SQL EXECUTE IMMEDIATE :sqlstmt ;

    if( Error_flag == 0 ) {  // 정상적으로 수행 되는 경우
        printf("\n");	
        printf(" 정상적으로 추가되었습니다.  아무키나 치세요 \n" ) ;
        EXEC SQL COMMIT WORK ;
        getch();
    }
    else {
        printf("\n");	
        printf(" 튜플이 추가되지 않았습니다. 아무키나 치세요 \n" ) ;
        EXEC SQL ROLLBACK WORK ;
        getch();
    }
}


void update_deposit_tuple()
{
    EXEC SQL BEGIN DECLARE SECTION;
    varchar v_acc_number[100];
    varchar v_acc_balance[100];
    char sqlstmt[1000];
    EXEC SQL END DECLARE SECTION;

    char accNo[100];
    char amount[100];
    int deposit_amount = 0;
    int x, y;

    // 계좌 목록 출력
    select_tuple();

    clrscr();
    print_screen("user_deposit_1.txt");

    // 계좌번호 입력
    x = 34;
    y = 9;
    gotoxy(x, y);
    while (1) {
        gets(accNo);
        if (accNo[0] == '\0') {
            printf("계좌번호를 입력하지 않았습니다. 다시 입력하세요: ");
        } else {
            break;
        }
    }

    // 계좌번호로 데이터 조회
    sprintf(sqlstmt, "SELECT ACC_NUMBER, ACC_BALANCE FROM ACCOUNT WHERE ACC_NUMBER = '%s'", accNo);

    EXEC SQL PREPARE S FROM :sqlstmt;
    EXEC SQL DECLARE u_cursor CURSOR FOR S;
    EXEC SQL OPEN u_cursor;
    EXEC SQL FETCH u_cursor INTO :v_acc_number, :v_acc_balance;

    if (sqlca.sqlcode == 1403) { // 계좌번호가 없는 경우
        printf("검색된 계좌가 없습니다!!! 아무키나 치세요\n");
        getch();
        EXEC SQL CLOSE u_cursor;
        return;
    }

    v_acc_number.arr[v_acc_number.len] = '\0';
    v_acc_balance.arr[v_acc_balance.len] = '\0';

    gotoxy(34, 15);
    printf("\n");
    printf("                            계좌번호: %s    현재 잔액: %s\n", v_acc_number.arr, v_acc_balance.arr);

    EXEC SQL CLOSE u_cursor;

    // 입금 금액 입력
    y += 3;
    gotoxy(x, y);
    while (1) {
        gets(amount);
        if (amount[0] == '\0') {
            printf("금액을 입력하지 않았습니다. 다시 입력하세요: ");
        } else if (strspn(amount, "0123456789") != strlen(amount)) {
            printf("금액은 숫자여야 합니다. 다시 입력하세요: ");
        } else {
            deposit_amount = atoi(amount);
            if (deposit_amount <= 0) {
                printf("입금 금액은 0보다 커야 합니다. 다시 입력하세요: ");
            } else {
                break;
            }
        }
    }

    // 계좌 잔액 업데이트
    sprintf(sqlstmt, "UPDATE ACCOUNT SET ACC_BALANCE = ACC_BALANCE + %d WHERE ACC_NUMBER = '%s'", deposit_amount, accNo);

    EXEC SQL EXECUTE IMMEDIATE :sqlstmt;

    if (sqlca.sqlcode == 0) { // 성공 
        EXEC SQL COMMIT WORK;
        sprintf(sqlstmt,"INSERT INTO transaction (T_ID, T_SENDER, T_RECEIVER, T_AMOUNT) VALUES (t_id_seq.nextval, '00000000', '%s', %d)", accNo, deposit_amount);
        EXEC SQL EXECUTE IMMEDIATE :sqlstmt;
        clrscr();
        print_screen("user_deposit_2.txt");
        sprintf(sqlstmt, "SELECT ACC_BALANCE FROM ACCOUNT WHERE ACC_NUMBER = '%s'", accNo);

        EXEC SQL PREPARE S2 FROM :sqlstmt; // 새 커서를 준비합니다.
        EXEC SQL DECLARE balance_cursor CURSOR FOR S2;
        EXEC SQL OPEN balance_cursor;

        EXEC SQL FETCH balance_cursor INTO :v_acc_balance;
        EXEC SQL CLOSE balance_cursor;
        gotoxy(41, 9);
        printf("%s", v_acc_balance.arr);
        getch();
    } else { // 실패
        printf("\n입금되지 않았습니다. 아무키나 치세요\n");
        EXEC SQL ROLLBACK WORK;
        getch();
    }
    EXEC SQL COMMIT WORK;
}

void send_money()
{
EXEC SQL BEGIN DECLARE SECTION;
    varchar v_sender[100];
    varchar v_receiver_name[100];
    varchar v_balance[16];

    char sqlstmt[1000];
    char sqlstmt_sender[1000];
    char sqlstmt_update_sender[1000];
    char sqlstmt_update_receiver[1000];
    char sqlstmt_transation[1000];
EXEC SQL END DECLARE SECTION;

    char sender[100] ;
    char receiver[100] ;
    char amount[100];

    char  flag = 'n' ;
    int x, y ;
    int i;
//----------------------------------------

   clrscr();
   print_screen("user_send_1.txt");

    x = 34;
    y = 9;

    gotoxy(x,y)  ; 
    gets(sender) ;

    x = 34;
    y = 11;

    gotoxy(x,y) ; 
    gets(receiver) ;

/*------  수신자 정보 조회 ----------------*/

    sprintf(sqlstmt,"SELECT u.user_name FROM b_user u, account a where a.acc_user = u.user_id and a.acc_number = '%s'", receiver) ;

    //printf("stmt:%s\n", sqlstmt);

    EXEC SQL PREPARE S FROM :sqlstmt ;

    EXEC SQL DECLARE receiver_cursor CURSOR FOR S ; 

    EXEC SQL OPEN receiver_cursor ; 

    EXEC SQL FETCH receiver_cursor INTO :v_receiver_name;

    if(sqlca.sqlcode == 1403) {  // 더이상 가져올 투플이 없는 경우
       printf("\n\n                     입금 계좌를 찾을 수 없습니다.\n");
       EXEC SQL CLOSE receiver_cursor;
       getch();
       return;
    }

    v_receiver_name.arr[v_receiver_name.len] = '\0';

/*------  입금자 정보 조회 ----------------*/
    sprintf(sqlstmt_sender, "SELECT acc_balance FROM account WHERE acc_number = '%s'", sender);
    EXEC SQL PREPARE SENDER_QUERY FROM :sqlstmt_sender;
    EXEC SQL DECLARE sender_cursor CURSOR FOR SENDER_QUERY;
    EXEC SQL OPEN sender_cursor;

    EXEC SQL FETCH sender_cursor INTO :v_balance;

    if (sqlca.sqlcode == 1403) { // 송금자 계좌가 존재하지 않음
        printf("\n\n                     송금 계좌를 찾을 수 없습니다.\n");
        EXEC SQL CLOSE sender_cursor;
        EXEC SQL CLOSE receiver_cursor; 
        getch();
        return;
    }

    v_balance.arr[v_balance.len] = '\0'; 

    clrscr();
    print_screen("user_send_2.txt");

    printf("\n\n                             입금 계좌: %s\n", receiver);
    printf("                             받는 분  : %s\n\n", v_receiver_name.arr);

    printf("                             출금 계좌: %s\n", sender);
    printf("                             계좌 잔액: %8s 원\n\n\n", v_balance.arr);

    int sender_balance = atoi(v_balance.arr);

    printf("                             송금 금액: ");
    printf("\n\n\n\n------------------------------------------------------------------------------");
    gotoxy(40, 17);
    gets(amount);
    int transfer_amount = atoi(amount);

     if (transfer_amount > sender_balance) {
        printf("\n\n송금액이 계좌 잔액을 초과합니다. 송금할 수 없습니다.\n");
        EXEC SQL CLOSE sender_cursor;
        EXEC SQL CLOSE receiver_cursor;
        getch();
        return;
    }


    sprintf(sqlstmt_update_sender, "UPDATE account SET acc_balance = acc_balance - %d WHERE acc_number = '%s'", transfer_amount, sender);
    EXEC SQL EXECUTE IMMEDIATE :sqlstmt_update_sender;
    if (sqlca.sqlcode != 0)
    {
        printf("\n\n송금자 잔액 감소 중 오류가 발생했습니다.\n");
        EXEC SQL CLOSE sender_cursor;
        EXEC SQL CLOSE receiver_cursor;
        getch();
        return;
    }
    sprintf(sqlstmt_update_receiver, "UPDATE account SET acc_balance = acc_balance + %d WHERE acc_number = '%s'", transfer_amount, receiver);
    EXEC SQL EXECUTE IMMEDIATE :sqlstmt_update_receiver;
    if (sqlca.sqlcode != 0)
    {
        printf("\n\n수신자 잔액 증가 중 오류가 발생했습니다.\n");
        EXEC SQL CLOSE sender_cursor;
        EXEC SQL CLOSE receiver_cursor;
        getch();
        return;
    }


    sprintf(sqlstmt_transation,"INSERT INTO transaction (T_ID, T_SENDER, T_RECEIVER, T_AMOUNT) VALUES (t_id_seq.nextval, '%s', '%s', %d)", sender, receiver, transfer_amount);
    EXEC SQL EXECUTE IMMEDIATE :sqlstmt_transation;
    if (sqlca.sqlcode != 0)
    {
        printf("거래 내역 삽입 중 오류 발생: %d\n", sqlca.sqlcode);
        EXEC SQL CLOSE sender_cursor;
        EXEC SQL CLOSE receiver_cursor;
        getch();
        return;
    }




    EXEC SQL COMMIT;
    EXEC SQL CLOSE sender_cursor;
    EXEC SQL CLOSE receiver_cursor;
    clrscr();
    print_screen("user_send_3.txt");
    getch();
}

void withdraw(){ // --------------------------------------------------------------출금
    EXEC SQL BEGIN DECLARE SECTION;
    varchar v_balance[16];

    char sqlstmt[1000];
    char update_stmt[1000];
    char sqlstmt_transation[1000];
    EXEC SQL END DECLARE SECTION;
    char amount[100];
    char account[100];


    select_tuple();

    clrscr();
    print_screen("user_withdraw_1.txt");
    gotoxy(34, 11);
    gets(account);

    sprintf(sqlstmt,"SELECT acc_balance FROM account where acc_user = '%s' and acc_number = '%s'", id, account);
    //printf("stmt:%s\n", sqlstmt);
    EXEC SQL PREPARE S FROM :sqlstmt ;
    EXEC SQL DECLARE w_cursor CURSOR FOR S ; 
    EXEC SQL OPEN w_cursor ; 
    EXEC SQL FETCH w_cursor INTO :v_balance;

    if(sqlca.sqlcode == 1403) {  // 더이상 가져올 투플이 없는 경우
       printf("\n\n                     출금 계좌를 찾을 수 없습니다.\n");
       EXEC SQL CLOSE w_cursor;
       getch();
       return;
    }
    v_balance.arr[v_balance.len] = '\0';
    int current_balance = atoi(v_balance.arr);

    clrscr();
    print_screen("user_withdraw_2.txt");
    gotoxy(34,9);
    printf(account);
    gotoxy(34, 11);
    printf(v_balance.arr);
    gotoxy(34, 14);
    gets(amount);
    int withdrawal_amount = atoi(amount);

    if (withdrawal_amount > current_balance) {
        printf("\n\n출금 금액이 잔액을 초과합니다. 출금할 수 없습니다.\n");
        EXEC SQL CLOSE w_cursor;
        getch();
        return;
    }
    int new_balance = current_balance - withdrawal_amount;
    sprintf(update_stmt, "UPDATE account SET acc_balance = %d WHERE acc_user = '%s' AND acc_number = '%s'",new_balance, id, account);
    EXEC SQL EXECUTE IMMEDIATE :update_stmt;
    if (sqlca.sqlcode == 0) {

        sprintf(sqlstmt_transation,"INSERT INTO transaction (T_ID, T_SENDER, T_RECEIVER, T_AMOUNT) VALUES (t_id_seq.nextval, '%s', '00000000', %d)", account, withdrawal_amount);
        EXEC SQL EXECUTE IMMEDIATE :sqlstmt_transation;
        if (sqlca.sqlcode != 0)
        {
        printf("거래 내역 삽입 중 오류 발생: %d\n", sqlca.sqlcode);
        EXEC SQL CLOSE w_cursor;
        getch();
        return;
        }

        clrscr();
        print_screen("user_withdraw_3.txt");
        EXEC SQL COMMIT WORK;
    } 
    else{
        printf("\n\n출금에 실패하였습니다. 다시 시도해주세요.\n");
        EXEC SQL ROLLBACK WORK;
    }

    EXEC SQL CLOSE w_cursor; // 커서 닫기
    getch();

}

void delete_tuple()
{

EXEC SQL BEGIN DECLARE SECTION;
    varchar v_acc_number[100];
    varchar v_acc_balance[100];
 
    char sqlstmt[1000];
EXEC SQL END DECLARE SECTION;

    char accNo[50] ;
    char d_input[50];
    char flag = 'n' ;
    int x, y ;
    int i;
//----------------------------------------

    clrscr();
    print_screen("user_delete_1.txt");

    gotoxy(35,10);
    while(1) {
        gotoxy(35,10);
        printf("                  ");
        gotoxy(35,10);
        gets(d_input); // 비밀번호 입력
    if(strcmp(d_input, password) == 0 ){
        clrscr();
        print_screen("user_delete_2.txt");
        break;
    } else {
        gotoxy(20, 12);
        printf("비밀번호가 일치하지 않습니다. 다시 입력해 주세요.");
        gotoxy(35,10);
    }
    }
    select_tuple();

    gotoxy(10,17);
    printf("삭제할 계좌번호를 입력하세요 : ");
    while (1) {
    gets(accNo); // 계좌번호 입력

    // 입력값 검증
    if (accNo[0] == '\0') {
        printf("계좌번호를 입력하지 않았습니다. 다시 입력하세요: ");
    } else if (strspn(accNo, "0123456789") != strlen(accNo)) { // 숫자만 허용
        printf("계좌번호는 숫자여야 합니다. 다시 입력하세요: ");
    } else {
        break; // 유효한 입력값이 있으면 루프 종료
    }
}

    

/*------ 삭제할 투플을 먼저 찾아서 사용자에게 보여줌 ----------------*/
    sprintf(sqlstmt,"SELECT TO_CHAR(ACC_NUMBER), TO_CHAR(ACC_BALANCE) FROM ACCOUNT where TO_CHAR(ACC_NUMBER) = %s", accNo) ; // SQL문에 삽입
    //printf("stmt:%s\n", sqlstmt);
    EXEC SQL PREPARE S FROM :sqlstmt ;
    EXEC SQL DECLARE d_cursor CURSOR FOR S ; 
    EXEC SQL OPEN d_cursor ; 

    while(1)
    {
        EXEC SQL FETCH d_cursor INTO :v_acc_number, :v_acc_balance ;

        if(sqlca.sqlcode == 1403) {  // 더이상 가져올 투플이 없는 경우
            break;
        }

        v_acc_number.arr[v_acc_number.len] = '\0';
        v_acc_balance.arr[v_acc_balance.len] = '\0';
        gotoxy(10,19);
        printf("계좌번호 : %s    계좌잔액 : %s \n", v_acc_number.arr, v_acc_balance.arr);
    }
    EXEC SQL CLOSE d_cursor; 

    /*  가져온 투플이 하나도 없는 경우는 메시지 출력 후 돌아가야 함 */
    if ( sqlca.sqlerrd[2] == 0 ) {
        printf("검색된 투플이 없습니다!!!  아무키나 치세요");
        getch();
        return ;
    }

    // 삭제 처리 부분
    gotoxy(10,20);
    printf("위의 투플들을 삭제하시겠습니까? (y/n) :");   

    flag = (char *)getchar() ;
    while (getchar() != '\n');  // 첫글자 외 나머지 입력 버림

    if( flag == 'y' || flag =='Y' ){
        if (strcmp(v_acc_balance.arr, "0") != 0) {
        gotoxy(10,17);
        printf("계좌에 잔액이 존재해 계좌를 삭제할 수 없습니다!\n");
        getch();
        return;
        }

        sprintf(sqlstmt,"delete from ACCOUNT where ACC_NUMBER = %s ", accNo);
        //printf("stmt:%s\n", sqlstmt);
        // 아래 문장 수행 중에 에러가 발생하면 error 처리 루틴으로 감. Error_flag=1로 바뀜 
        Error_flag = 0 ;
        EXEC SQL EXECUTE IMMEDIATE :sqlstmt ;

        if( Error_flag == 0 ) {  // 정상적으로 수행 되는 경우
            printf("\n");
            gotoxy(10,17);
            printf("정상적으로 삭제되었습니다.  아무키나 치세요 \n" ) ;
            EXEC SQL COMMIT WORK ;
            getch();
        }
        else {   //Error_falg == 1. 에러가 발생된 경우
            printf("\n");	
            printf(" 튜플이 삭제되지 않았습니다. 아무키나 치세요 \n" ) ;
            EXEC SQL ROLLBACK WORK ;
            getch();
        }
        
    }
    else {    // 삭제 취소
        printf("\n");	
        printf("삭제 취소\n");
        printf("메인메뉴로 가기 : 아무키나 치세요. ");
        getch();
    }

}

void transaction_tuple()
{
    select_tuple();

    getch();
   EXEC SQL BEGIN DECLARE SECTION;
   varchar v_T_DATE[100];
   varchar v_T_SENDER[100];
   varchar v_T_RECEIVER[100];
   varchar v_T_AMOUNT[100];

    char sqlstmt[1000];
    EXEC SQL END DECLARE SECTION;

   char accNo[50] ; // 내 계좌번호 입력


   int x, y, count=0, i ;

   /* 사용자 입력 */
   clrscr();

   print_screen("user_transaction.txt");
    gotoxy(27, 19);
    gets(accNo);
   /* 실행시킬 SQL 문장*/
   sprintf(sqlstmt,"SELECT T_DATE, T_SENDER, T_RECEIVER, T_AMOUNT FROM TRANSACTION where T_SENDER = '%s' OR T_RECEIVER = '%s' ", accNo, accNo); 

   /* select 문장이 제대로 구성되어 있는지 화면에 찍어봄 */
   // printf("sqlstmt:%s\n", sqlstmt);

   EXEC SQL PREPARE S FROM :sqlstmt ;

   /* 1. cursor declare */
   EXEC SQL DECLARE ts_cursor CURSOR FOR S ; 

   /* 2. cursor open */
   EXEC SQL OPEN ts_cursor ; 

   x = 10;
   y = 8 ;

   // EXEC SQL WHENEVER NOT FOUND DO break ;  원래는 이렇게 해야 하는데 버그 때문에 아래와 같이 사용함
   while(1)
    {
        /* 3. tuple fetch */
        EXEC SQL FETCH ts_cursor INTO :v_T_DATE, :v_T_SENDER, :v_T_RECEIVER, :v_T_AMOUNT;
       
        if(sqlca.sqlcode == 1403) {  // 더이상 가져올 투플이 없는 경우
            break;
        }
        v_T_DATE.arr[v_T_DATE.len] = '\0' ;
        v_T_SENDER.arr[v_T_SENDER.len] = '\0';
        v_T_RECEIVER.arr[v_T_RECEIVER.len] = '\0';
        v_T_AMOUNT.arr[v_T_AMOUNT.len] = '\0';


        gotoxy(x,y);
        printf(" |  %10s  |   %-4s   |   %-10s  |   %13s 원|", v_T_DATE.arr ,v_T_SENDER.arr, v_T_RECEIVER.arr , v_T_AMOUNT.arr);
        y++;
        count++;
        if( count == PAGE_NUM){
            printf("\n\n                                  hit any key for next\n");
            count = 0;
            getch();

            gotoxy(0,8); //이전 화면 부분 클리어
            for(i= 0; i < PAGE_NUM; i++){
                printf("                                                                                               \n");
            }
            y = 8 ;
        }
    }
    printf("\n\n");	
    printf("                          match tuple no : %d\n", sqlca.sqlerrd[2]);

    /* 4. close the cursor. */
    EXEC SQL CLOSE ts_cursor;

    getch();   // 아무키나 치세요. 
}

//==================================================

void print_screen(char fname[])
{
    FILE *fp;
    char line[100];

    if ( (fp = fopen(fname,"r"))  == NULL ){
        printf("file open error\n");
        getch();
        exit(-1);
    }
    while(1) {
        if( fgets(line, 99, fp) == NULL){
            break;
        }
        printf("%s", line);
    }

    fclose(fp);
}

/* --------------------------------------------------------------------------
int sql_error()

   errrpt prints the ORACLE error msg and number.
-------------------------------------------------------------------------- */
void sql_error(char *msg)
{
    char err_msg[128];
    size_t buf_len, msg_len;
    int x, y ;

    EXEC SQL WHENEVER SQLERROR CONTINUE;

    getxy(&x, &y);  // 현재 커서 위치 저장

    Error_flag = 1;    //에러가 발생됨을 셋팅함

    gotoxy(1,22) ;   //마지막 줄로 이동

    printf("%s", msg);
    buf_len = sizeof (err_msg);
    sqlglm(err_msg, &buf_len, &msg_len);
    printf("%.*s\n", msg_len, err_msg);

    gotoxy(x, y) ;   // 저장해 두었던 원래 커서 위치로 이동
    //getch();
}

/*---------------  화면 커서 제어 함수 --------------------*/
#define STD_HANDLE GetStdHandle(STD_OUTPUT_HANDLE)

void gotoxy(int x, int y)
{
    COORD Cur= {(SHORT)x, (SHORT) y};

    SetConsoleCursorPosition(STD_HANDLE, Cur);
}

void getxy(int *x, int *y)
{
    CONSOLE_SCREEN_BUFFER_INFO Buf ;

    GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &Buf);
    *x = (int)Buf.dwCursorPosition.X ;
    *y = (int)Buf.dwCursorPosition.Y ;
 
}

void clrscr(void)
{
    COORD Cur= {0, 0};
    unsigned long dwLen;

//    FillConsoleOutputCharacter(STD_HANDLE, ' ', 80*25, Cur, &dwLen);
    FillConsoleOutputCharacter(STD_HANDLE, ' ', 120*28, Cur, &dwLen);
    gotoxy(0,0);
}


/*---------------------------------------------------------*/
